'use strict';

const { WorkloadModuleBase } = require('@hyperledger/caliper-core');


class MyWorkload extends WorkloadModuleBase {
    constructor() {
        super();
    }

    async initializeWorkloadModule(workerIndex, totalWorkers, roundIndex, roundArguments, sutAdapter, sutContext) {
        await super.initializeWorkloadModule(workerIndex, totalWorkers, roundIndex, roundArguments, sutAdapter, sutContext)
        

        for (let i=0; i<this.roundArguments.emrs; i++) {
            const emrID = `${this.workerIndex}_${i}`;
            console.log(`Worker ${this.workerIndex}: Creating emr ${emrID}`);
            const request = {
                contractId: this.roundArguments.contractId,
                contractFunction: 'CreateEmr',
                invokerIdentity: 'Admin@his1.jimson.com',
                contractArguments: [emrID, 'zhangsan', '11111111111111111', '123123123123', '123123123123', 'QmWinSCXWQDArYYrw9pH9b8RCtE1sKffvopgk1Q6kE1SKK'],
                readOnly: false
            };

            await this.sutAdapter.sendRequests(request);
        }
    }

    async submitTransaction() {

        //contractArguments:[emrID, 'zhangsan', '11111111111111111', '123123123123', '123123123123', 'QmWinSCXWQDArYYrw9pH9b8RCtE1sKffvopgk1Q6kE1SKK'],
        const randomId = Math.floor(Math.random()*this.roundArguments.emrs);
        const myArgs = {
            contractId: this.roundArguments.contractId,
            contractFunction: 'ReadEmr',
            invokerIdentity: 'Admin@his1.jimson.com',
            contractArguments: [`${this.workerIndex}_${randomId}`],
            readOnly: true
        };

        await this.sutAdapter.sendRequests(myArgs);
    }

    async cleanupWorkloadModule() {
        for (let i=0; i<this.roundArguments.emrs; i++) {
            const emrID = `${this.workerIndex}_${i}`;
            console.log(`Worker ${this.workerIndex}: Deleting emrs ${emrID}`);
            const request = {
                contractId: this.roundArguments.contractId,
                contractFunction: 'DeleteEmr',
                invokerIdentity: 'Admin@his1.jimson.com',
                contractArguments: [emrID],
                readOnly: false
            };

            await this.sutAdapter.sendRequests(request);
        }
    }

}

function createWorkloadModule() {
    return new MyWorkload();
}
module.exports.createWorkloadModule = createWorkloadModule;